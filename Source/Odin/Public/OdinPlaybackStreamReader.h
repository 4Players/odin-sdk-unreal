/* Copyright (c) 2022-2024 4Players GmbH. All rights reserved. */

#pragma once
#include "odin_sdk.h"
#include "CoreMinimal.h"

class IAudioBufferListener;

class ODIN_API FOdinAudioRingBuffer
{
  public:
    FOdinAudioRingBuffer(const int32 InCapacity);

    int32 Write(const float* InData, const int32 NumSamples);

    int32 Read(const int32 ReaderIndex, float* OutData, const int32 NumSamples);

    int32 GetAvailableSamples(const int32 ReaderIndex) const;
    int32 GetCurrentWriteIndex() const;

  private:
    int32         Capacity;
    TArray<float> Buffer;

    FCriticalSection   BufferSection;
    FThreadSafeCounter WriteIndex;
};

class ODIN_API FOdinPlaybackStreamReader
{
  public:
    FOdinPlaybackStreamReader(OdinMediaStreamHandle MediaHandle, int32 BufferCapacity);
    ~FOdinPlaybackStreamReader();

    OdinReturnCode ReadData(int32& RefReaderIndex, float* OutAudio, int32 NumSamples);

    /**
     * Add a listener to the Audio generated by the OdinMediaSoundGenerator.
     *
     * @param InAudioBufferListener - Pointer to an object implementing the IAudioBufferListener
     * interface.
     */
    void AddAudioBufferListener(IAudioBufferListener* InAudioBufferListener);
    /**
     * @param InAudioBufferListener The audio buffer listener to remove.
     */
    void RemoveAudioBufferListener(IAudioBufferListener* InAudioBufferListener);

    int32 GetLatestReadIndex() const;

  protected:
    TSharedPtr<FOdinAudioRingBuffer, ESPMode::ThreadSafe> MultipleAccessCache;
    OdinReturnCode                                        CachedReturnCode = 0;

    TSet<IAudioBufferListener*> AudioBufferListeners;
    FCriticalSection            BufferListenerAccessSection;

    FCriticalSection ReadFromOdinSection;

    OdinMediaStreamHandle MediaHandle;

    FThreadSafeCounter LatestReadIndex;
};